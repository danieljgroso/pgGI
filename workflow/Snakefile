# Phoebe C.R. Parrish
## Berger Lab, FHCRC
## 2022-10-03
## updated 2022-10-03
## snakemake v7.1.0

import os
import sys
import re
import pandas as pd

## define config file
configfile: "config/config.yaml"

## read config folders into Python variables
pgRNA_counts_dir = config["base_dir"] + config["pgRNA_counts_dir"]
pgRNA_counts_QC_dir = config["base_dir"] + config["pgRNA_counts_QC_dir"]

## get file names from results/pgRNA_counts_dir
counts_file_list = []
cell_line_list = []
for file in os.scandir(pgRNA_counts_dir): ## file is a POSIX object, not a str
    if file.is_file() and not file.name.startswith('.'):
        counts_file_list.append(file.path)
        # print(file.path)
        # print(file.name)
        cell_line = file.name.split("_")[2]
        cell_line_list.append(cell_line)
# print("counts_file_list =", counts_file_list)
# print("cell_line_list =", cell_line_list)


## rule all is used to define output file names for the final rule & for other
##   rules w/ no dependencies
## also important for defining wildcards
rule all:
    input:
        # expand(pgRNA_counts_QC_dir + config["base_sample_name"] + "_{cell_line}_counts_QC.html",
        #     cell_line = cell_line_list)
        expand("results/calculate_GI_scores/tables/tsv/{cell_line}_GI_scores_target.txt",
            cell_line = cell_line_list),
        expand("results/pgRNA_counts_QC/" + config["base_sample_name"] + "_{cell_line}_counts_QC.html",
            cell_line = cell_line_list),
        expand("results/pgRNA_annotations/" + config["base_sample_name"] + "_{cell_line}_get_pgRNA_annotations.html",
            cell_line = cell_line_list),
        expand("results/calculate_LFC/" + config["base_sample_name"] + "_{cell_line}_filter_and_calculate_LFC.html",
            cell_line = cell_line_list),
        expand("results/calculate_GI_scores/" + config["base_sample_name"] + "_{cell_line}_calculate_GI_scores.html",
            cell_line = cell_line_list)
        # gRNA_counts_dir + config["base_sample_name"] + ".count.txt"


## run Rmd: https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html
rule pgRNA_counts_QC:
    input:
        pgRNA_counts_dir + config["base_sample_name"] + "_{cell_line}_counts.txt"
    output:
        "results/pgRNA_counts_QC/tables/rds/d.{cell_line}_counts_cpm_flag_long",
        "results/pgRNA_counts_QC/" + config["base_sample_name"] + "_{cell_line}_counts_QC.html"
    conda:
        "envs/pgRNA_counts_QC.yaml"
    params:
        script = "workflow/scripts/pgRNA_counts_QC.Rmd",
        base_dir = config["base_dir"],
        out_dir = pgRNA_counts_QC_dir,
        out_dir_for_R = "results/pgRNA_counts_QC",
        report = config["base_sample_name"] + "_{cell_line}_counts_QC.html"
    log:
        "workflow/logs/pgRNA_counts_QC/{cell_line}.log"
    shell:
        """
        mkdir -p {params.out_dir}
        mkdir -p "workflow/logs/pgRNA_counts_QC/"

        ## note: single quotes must be used so R doesn't interpret special chars
        Rscript -e "rmarkdown::render('{params.script}',
            params = list(
                cell_line = '{cell_line}',
                base_dir = '{params.base_dir}'),
            output_dir = '{params.out_dir_for_R}',
            output_file = '{params.report}')" &> {log}
        """

rule get_pgRNA_annotations:
    input:
        pgRNA_counts_dir + config["base_sample_name"] + "_{cell_line}_counts.txt"
    output:
        "results/pgRNA_annotations/tables/rds/d.{cell_line}_annot",
        "results/pgRNA_annotations/" + config["base_sample_name"] + "_{cell_line}_get_pgRNA_annotations.html"
    conda:
        "envs/get_pgRNA_annotations.yaml"
    params:
        script = "workflow/scripts/get_pgRNA_annotations.Rmd",
        base_dir = config["base_dir"],
        out_dir = "results/pgRNA_annotations",
        report = config["base_sample_name"] + "_{cell_line}_get_pgRNA_annotations.html"
    log:
        "workflow/logs/get_pgRNA_annotations/{cell_line}.log"
    shell:
        """
        mkdir -p {params.out_dir}
        mkdir -p "workflow/logs/get_pgRNA_annotations/"

        ## note: single quotes must be used so R doesn't interpret special chars
        Rscript -e "rmarkdown::render('{params.script}',
            params = list(
                cell_line = '{cell_line}',
                base_dir = '{params.base_dir}'),
            output_dir = '{params.out_dir}',
            output_file = '{params.report}')" &> {log}
        """

rule calculate_LFC:
    input:
        "results/pgRNA_counts_QC/tables/rds/d.{cell_line}_counts_cpm_flag_long",
        "results/pgRNA_annotations/tables/rds/d.{cell_line}_annot"
    output:
        "results/calculate_LFC/tables/rds/d.{cell_line}_lfc_annot_adj_pgRNA",
        "results/calculate_LFC/" + config["base_sample_name"] + "_{cell_line}_filter_and_calculate_LFC.html"
    conda:
        "envs/LFC_and_GI_calcs.yaml"
    params:
        script = "workflow/scripts/filter_and_calculate_LFC.Rmd",
        base_dir = config["base_dir"],
        out_dir = "results/calculate_LFC",
        report = config["base_sample_name"] + "_{cell_line}_filter_and_calculate_LFC.html"
    log:
        "workflow/logs/calculate_LFC/{cell_line}.log"
    shell:
        """
        mkdir -p {params.out_dir}
        mkdir -p "workflow/logs/calculate_LFC/"

        ## note: single quotes must be used so R doesn't interpret special chars
        Rscript -e "rmarkdown::render('{params.script}',
            params = list(
                cell_line = '{cell_line}',
                base_dir = '{params.base_dir}'),
            output_dir = '{params.out_dir}',
            output_file = '{params.report}')" &> {log}
        """

rule calculate_GI_scores:
    input:
        "results/calculate_LFC/tables/rds/d.{cell_line}_lfc_annot_adj_pgRNA"
    output:
        "results/calculate_GI_scores/tables/tsv/{cell_line}_GI_scores_target.txt",
        "results/calculate_GI_scores/" + config["base_sample_name"] + "_{cell_line}_calculate_GI_scores.html"
    conda:
        "envs/LFC_and_GI_calcs.yaml"
    params:
        script = "workflow/scripts/calculate_GI_scores.Rmd",
        base_dir = config["base_dir"],
        out_dir = "results/calculate_GI_scores",
        report = config["base_sample_name"] + "_{cell_line}_calculate_GI_scores.html"
    log:
        "workflow/logs/calculate_GI_scores/{cell_line}.log"
    shell:
        """
        mkdir -p {params.out_dir}
        mkdir -p "workflow/logs/calculate_GI_scores/"

        ## note: single quotes must be used so R doesn't interpret special chars
        Rscript -e "rmarkdown::render('{params.script}',
            params = list(
                cell_line = '{cell_line}',
                base_dir = '{params.base_dir}'),
            output_dir = '{params.out_dir}',
            output_file = '{params.report}')" &> {log}
        """
